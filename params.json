{
  "name": "Promisify-decorator",
  "tagline": "Promisify decorator",
  "body": "# promisify decorator\r\n\r\nA class or method [decorator](https://github.com/wycats/javascript-decorators) which uses [promisify-call](https://github.com/bojand/promisify-call) to\r\npromisify methods so they can be called in either callback or promise style.\r\n\r\nAs decorators are a part of future ES2016 standard they can only be used with transpilers such\r\nas [Babel](http://babeljs.io).\r\n\r\n#### Babel 6 Usage\r\n\r\nThe implementation of the decorator transform is currently on hold as the syntax\r\nis not final. If you would like to use this project with Babel 6.0, you may use\r\n[babel-plugin-transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy)\r\nwhich implement Babel 5 decorator transform for Babel 6.\r\n\r\n#### Installation\r\n\r\n```sh\r\nnpm install promisify-decorator\r\n```\r\n\r\n#### Usage\r\n\r\nTrivial example to read a file.\r\n\r\n```js\r\nimport fs from 'fs';\r\nimport promisify from 'promisify-decorator';\r\n\r\nexport class FileReader {\r\n  @promisify\r\n  readFile(path, fn) {\r\n    return fs.readFile(path, 'utf8', fn);\r\n  }\r\n}\r\n```\r\n\r\nFrom there we can use callback style:\r\n\r\n```js\r\nconst f = new FileReader();\r\nf.readFile('./sample.txt', (err, res) => {\r\n  console.log(res);\r\n});\r\n```\r\n\r\nOr we can use promises:\r\n\r\n```js\r\nconst f = new FileReader();\r\nconst res = await f.readFile('./sample.txt');\r\nconsole.log(res);\r\n```\r\n\r\nSimilarly we can promisify a whole class including all of its methods:\r\n\r\n```js\r\nimport fs from 'fs';\r\nimport promisify from 'promisify-decorator';\r\n\r\n@promisify\r\nclass FileReader {\r\n  readFile(path, fn) {\r\n    return fs.readFile(path, 'utf8', fn);\r\n  }\r\n}\r\n```\r\n\r\n### License\r\n\r\nCopyright 2016 Bojan D.\r\n\r\nLicensed under the MIT License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}